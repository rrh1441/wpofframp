// lib/transformToMdx.ts
import OpenAI from 'openai';
import { generateMdxPrompt } from './generateMdxPrompt';
import { ThemeKey } from './constants';

// Ensure OPENAI_API_KEY is loaded from environment variables
if (!process.env.OPENAI_API_KEY) {
  throw new Error('Missing environment variable OPENAI_API_KEY');
}

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export interface MdxOutput {
  mdx: string; // The full MDX string including frontmatter
  frontmatter: {
    title: string;
    date: string;
    author: string;
    featuredImage?: string;
  };
  error?: string;
  llmResponse?: string; // Optional: Include raw LLM response for debugging
}

interface TransformToMdxArgs {
  htmlContent: string;
  theme: ThemeKey;
  title: string;
  date: string;
  author: string;
  featuredImage?: string;
}

// Basic YAML frontmatter parser (adjust if more complex parsing is needed)
function parseFrontmatter(mdxContent: string): Record<string, any> {
  const frontmatterRegex = /^---\s*([\s\S]*?)\s*---/;
  const match = mdxContent.match(frontmatterRegex);
  if (!match || !match[1]) {
    return {};
  }

  const yamlString = match[1];
  const frontmatter: Record<string, any> = {};
  const lines = yamlString.split('\n');

  lines.forEach((line) => {
    const parts = line.split(': ');
    if (parts.length >= 2) {
      const key = parts[0].trim();
      // Join remaining parts in case value contains ':' and remove quotes
      const value = parts.slice(1).join(': ').trim().replace(/^['"]|['"]$/g, '');
      if (key) {
        frontmatter[key] = value;
      }
    }
  });
  return frontmatter;
}

export async function transformToMdx({
  htmlContent,
  theme,
  title,
  date,
  author,
  featuredImage,
}: TransformToMdxArgs): Promise<MdxOutput> {
  const prompt = generateMdxPrompt({
    htmlContent,
    theme,
    title,
    date,
    author,
    featuredImage,
  });

  // console.log('----- LLM Prompt -----'); // Debug
  // console.log(prompt);                  // Debug
  // console.log('----------------------'); // Debug

  try {
    const completion = await openai.chat.completions.create({
      // Consider using gpt-4-turbo for better HTML understanding if needed, but gpt-3.5 is faster/cheaper
      model: 'gpt-4o-mini', // Or 'gpt-4-turbo', 'gpt-3.5-turbo'
      messages: [
        {
          role: 'system',
          content:
            'You are an expert assistant specializing in converting HTML to clean, structured MDX with YAML frontmatter, following specific guidelines.',
        },
        { role: 'user', content: prompt },
      ],
      temperature: 0.2, // Lower temperature for more deterministic output
      max_tokens: 3000, // Adjust based on expected content length
    });

    const rawMdx = completion.choices[0]?.message?.content?.trim() ?? '';

    if (!rawMdx) {
      console.error('LLM returned empty content.');
      return {
        error: 'Content transformation failed: LLM returned empty content.',
        mdx: '',
        frontmatter: { title, date, author, featuredImage }, // Return original metadata on error
        llmResponse: '(empty)',
      };
    }

    // console.log('----- Raw LLM Output -----'); // Debug
    // console.log(rawMdx);                     // Debug
    // console.log('--------------------------'); // Debug

    // Attempt to parse frontmatter from the LLM's output
    const parsedFm = parseFrontmatter(rawMdx);

    // Validate essential frontmatter fields or use fallbacks
    const finalFrontmatter = {
      title: parsedFm.title || title,
      date: parsedFm.date || date,
      author: parsedFm.author || author,
      featuredImage: parsedFm.featuredImage || featuredImage,
    };

    // Basic validation: check if frontmatter seems present
     if (!rawMdx.startsWith('---')) {
        console.warn("LLM output doesn't start with frontmatter. Prepending based on input.");
        // Attempt to reconstruct if LLM failed to generate frontmatter
        const frontmatterString = `---
title: "${finalFrontmatter.title.replace(/"/g, '\\"')}"
date: "${finalFrontmatter.date}"
author: "${finalFrontmatter.author.replace(/"/g, '\\"')}"
${finalFrontmatter.featuredImage ? `featuredImage: "${finalFrontmatter.featuredImage}"\n` : ''}---

`;
         return {
           mdx: frontmatterString + rawMdx, // Prepend reconstructed FM
           frontmatter: finalFrontmatter,
           llmResponse: rawMdx, // Keep raw response for debugging
         };
      }


    return {
      mdx: rawMdx, // Return the full MDX including the frontmatter generated by LLM
      frontmatter: finalFrontmatter,
      llmResponse: rawMdx, // Optional: return raw response for debugging
    };
  } catch (error: any) {
    console.error('Error calling LLM API:', error);
    let errorMessage = 'Content transformation failed due to an LLM API error.';
    if (error.response?.data?.error?.message) {
        errorMessage += `: ${error.response.data.error.message}`;
    } else if (error.message) {
         errorMessage += `: ${error.message}`;
    }
    return {
        error: errorMessage,
        mdx: '',
        frontmatter: { title, date, author, featuredImage } // Return original metadata on error
    };
  }
}